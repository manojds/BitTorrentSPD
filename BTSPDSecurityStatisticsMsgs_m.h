//
// Generated file, do not edit! Created by opp_msgc 4.2 from applications/BitTorrentSPD/BTSPDSecurityStatisticsMsgs.msg.
//

#ifndef _BTSPDSECURITYSTATISTICSMSGS_M_H_
#define _BTSPDSECURITYSTATISTICSMSGS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>applications/BitTorrentSPD/BTSPDSecurityStatisticsMsgs.msg</tt> by opp_msgc.
 * <pre>
 * message BTSPDSecurityStatus
 * {
 *     @omitGetVerb(true);
 *     string moduleType;    
 * }
 * </pre>
 */
class BTSPDSecurityStatus : public ::cMessage
{
  protected:
    opp_string moduleType_var;

  private:
    void copy(const BTSPDSecurityStatus& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTSPDSecurityStatus&);

  public:
    BTSPDSecurityStatus(const char *name=NULL, int kind=0);
    BTSPDSecurityStatus(const BTSPDSecurityStatus& other);
    virtual ~BTSPDSecurityStatus();
    BTSPDSecurityStatus& operator=(const BTSPDSecurityStatus& other);
    virtual BTSPDSecurityStatus *dup() const {return new BTSPDSecurityStatus(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * moduleType() const;
    virtual void setModuleType(const char * moduleType);
};

inline void doPacking(cCommBuffer *b, BTSPDSecurityStatus& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BTSPDSecurityStatus& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/BitTorrentSPD/BTSPDSecurityStatisticsMsgs.msg</tt> by opp_msgc.
 * <pre>
 * message BTSPDVulnerabilityStatus
 * {
 *     @omitGetVerb(true);
 * 
 *     
 *     bool vulnerabilityFixed;
 * 
 * }
 * </pre>
 */
class BTSPDVulnerabilityStatus : public ::cMessage
{
  protected:
    bool vulnerabilityFixed_var;

  private:
    void copy(const BTSPDVulnerabilityStatus& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTSPDVulnerabilityStatus&);

  public:
    BTSPDVulnerabilityStatus(const char *name=NULL, int kind=0);
    BTSPDVulnerabilityStatus(const BTSPDVulnerabilityStatus& other);
    virtual ~BTSPDVulnerabilityStatus();
    BTSPDVulnerabilityStatus& operator=(const BTSPDVulnerabilityStatus& other);
    virtual BTSPDVulnerabilityStatus *dup() const {return new BTSPDVulnerabilityStatus(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool vulnerabilityFixed() const;
    virtual void setVulnerabilityFixed(bool vulnerabilityFixed);
};

inline void doPacking(cCommBuffer *b, BTSPDVulnerabilityStatus& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BTSPDVulnerabilityStatus& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/BitTorrentSPD/BTSPDSecurityStatisticsMsgs.msg</tt> by opp_msgc.
 * <pre>
 * message BTSPDThreatStatus
 * {
 *     @omitGetVerb(true);
 * 
 *     bool infected;
 *     
 * }
 * </pre>
 */
class BTSPDThreatStatus : public ::cMessage
{
  protected:
    bool infected_var;

  private:
    void copy(const BTSPDThreatStatus& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BTSPDThreatStatus&);

  public:
    BTSPDThreatStatus(const char *name=NULL, int kind=0);
    BTSPDThreatStatus(const BTSPDThreatStatus& other);
    virtual ~BTSPDThreatStatus();
    BTSPDThreatStatus& operator=(const BTSPDThreatStatus& other);
    virtual BTSPDThreatStatus *dup() const {return new BTSPDThreatStatus(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool infected() const;
    virtual void setInfected(bool infected);
};

inline void doPacking(cCommBuffer *b, BTSPDThreatStatus& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BTSPDThreatStatus& obj) {obj.parsimUnpack(b);}


#endif // _BTSPDSECURITYSTATISTICSMSGS_M_H_
